{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Subscription } from 'rxjs';\nlet AppComponent = class AppComponent {\n  constructor(http, postService) {\n    this.http = http;\n    this.postService = postService;\n    this.title = 'app';\n    this.loadedPosts = [];\n    this.isFetching = false;\n    this.error = null;\n    this.errorSub = new Subscription();\n  }\n  ngOnInit() {\n    this.errorSub = this.postService.error.subscribe(errorMessage => {\n      this.error != errorMessage;\n    });\n    this.isFetching = true;\n    this.postService.fetchPosts().subscribe(posts => {\n      this.isFetching = false;\n      this.loadedPosts = posts;\n    }, error => {\n      this.error = error.message;\n    });\n  }\n  onCreatePost(postData) {\n    this.postService.createAndStorePost(postData.title, postData.content);\n    // console.log(postData);\n    // this.http.post<{name:string}>(\"https://ng-complete-guide-4db6b-default-rtdb.firebaseio.com/posts.json\", postData).subscribe(responseData => {\n    //   console.log(responseData);\n    // })  \n    this.signupForm.reset();\n  }\n  onFetchPosts() {\n    this.postService.fetchPosts();\n    this.postService.fetchPosts().subscribe(posts => {\n      this.isFetching = false;\n      this.loadedPosts = posts;\n    }, error => {\n      this.error = error.message;\n      console.log(error);\n    });\n  }\n  onClearPosts() {\n    this.postService.deletePosts().subscribe(() => {\n      this.loadedPosts = [];\n    });\n  }\n  // private fetchPosts() {\n  //   this.isFetching=true;\n  //   //RESPONSE WILL return as a body\n  //   this.http.get<{[key:string]:Post}>(\"https://ng-complete-guide-4db6b-default-rtdb.firebaseio.com/posts.json\").pipe(map((responseData:{[key:string]:Post}) => {\n  //     const postsArray:Post[] = [];\n  //     for (const key in responseData) {\n  //       if (responseData.hasOwnProperty(key)) {\n  //         postsArray.push({...responseData[key], id: key });\n  //       }\n  //     }\n  //     return postsArray;\n  //   })).subscribe(posts => {\n  //     this.isFetching=false;\n  //     this.loadedPosts=posts;\n  //   })\n  // }\n  ngOnDestroy() {\n    this.errorSub.unsubscribe();\n  }\n};\n__decorate([ViewChild('postForm', {\n  static: false\n})], AppComponent.prototype, \"signupForm\", void 0);\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":";AACA,SAASA,SAAS,EAAqBC,SAAS,QAAQ,eAAe;AAEvE,SAASC,YAAY,QAAQ,MAAM;AAS5B,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAsBvBC,YAAoBC,IAAgB,EAASC,WAAwB;IAAjD,SAAI,GAAJD,IAAI;IAAqB,gBAAW,GAAXC,WAAW;IArBxD,UAAK,GAAG,KAAK;IAEb,gBAAW,GAAU,EAAE;IACvB,eAAU,GAAC,KAAK;IAChB,UAAK,GAAC,IAAI;IACF,aAAQ,GAAiB,IAAIJ,YAAY;EAgBwB;EAbzEK,QAAQ;IACN,IAAI,CAACC,QAAQ,GAAC,IAAI,CAACF,WAAW,CAACG,KAAK,CAACC,SAAS,CAACC,YAAY,IAAE;MAC3D,IAAI,CAACF,KAAK,IAAEE,YAAY;IAC1B,CAAC,CAAC;IACF,IAAI,CAACC,UAAU,GAAC,IAAI;IACpB,IAAI,CAACN,WAAW,CAACO,UAAU,EAAE,CAACH,SAAS,CAACI,KAAK,IAAE;MAC7C,IAAI,CAACF,UAAU,GAAC,KAAK;MACrB,IAAI,CAACG,WAAW,GAACD,KAAK;IACxB,CAAC,EACDL,KAAK,IAAE;MACL,IAAI,CAACA,KAAK,GAACA,KAAK,CAACO,OAAO;IAC1B,CAAC,CAAC;EACJ;EAEAC,YAAY,CAACC,QAAc;IACzB,IAAI,CAACZ,WAAW,CAACa,kBAAkB,CAACD,QAAQ,CAACE,KAAK,EAACF,QAAQ,CAACG,OAAO,CAAC;IACpE;IACA;IACA;IAGA;IACA,IAAI,CAACC,UAAU,CAACC,KAAK,EAAE;EAEzB;EACAC,YAAY;IACV,IAAI,CAAClB,WAAW,CAACO,UAAU,EAAE;IAC7B,IAAI,CAACP,WAAW,CAACO,UAAU,EAAE,CAACH,SAAS,CAACI,KAAK,IAAE;MAC7C,IAAI,CAACF,UAAU,GAAC,KAAK;MACrB,IAAI,CAACG,WAAW,GAACD,KAAK;IACxB,CAAC,EAACL,KAAK,IAAE;MACP,IAAI,CAACA,KAAK,GAACA,KAAK,CAACO,OAAO;MACxBS,OAAO,CAACC,GAAG,CAACjB,KAAK,CAAC;IACpB,CAAC,CAAC;EAEJ;EACAkB,YAAY;IACV,IAAI,CAACrB,WAAW,CAACsB,WAAW,EAAE,CAAClB,SAAS,CAAC,MAAI;MAC5C,IAAI,CAACK,WAAW,GAAC,EAAE;IAAA,CAAC,CAAC;EAGxB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACAc,WAAW;IACT,IAAI,CAACrB,QAAQ,CAACsB,WAAW,EAAE;EAC7B;CACD;AArE2CC,YAAzC9B,SAAS,CAAC,UAAU,EAAE;EAAE+B,MAAM,EAAE;AAAK,CAAE,CAAC,gDAAqB;AAFnD7B,YAAY,eALxBH,SAAS,CAAC;EACTiC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,qBAAqB;CAClC,CAAC,GACWhC,YAAY,CAuExB;SAvEYA,YAAY","names":["Component","ViewChild","Subscription","AppComponent","constructor","http","postService","ngOnInit","errorSub","error","subscribe","errorMessage","isFetching","fetchPosts","posts","loadedPosts","message","onCreatePost","postData","createAndStorePost","title","content","signupForm","reset","onFetchPosts","console","log","onClearPosts","deletePosts","ngOnDestroy","unsubscribe","__decorate","static","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Sanjan.shetty\\OneDrive - Happiest Minds Technologies Limited\\Desktop\\Poc-angular\\app\\src\\app\\app.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Post } from './post.model';\nimport { PostsService } from './posts.service';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit,OnDestroy {\n  title = 'app';\n  @ViewChild('postForm', { static: false }) signupForm!: NgForm;\n  loadedPosts:Post[] = [];\n  isFetching=false;\n  error=null;\n  private errorSub: Subscription = new Subscription;\n\n\n  ngOnInit() {\n    this.errorSub=this.postService.error.subscribe(errorMessage=>{\n      this.error!=errorMessage;\n    })\n    this.isFetching=true;\n    this.postService.fetchPosts().subscribe(posts=>{\n      this.isFetching=false;\n      this.loadedPosts=posts;\n    },\n    error=>{\n      this.error=error.message;\n    });\n  }\n  constructor(private http: HttpClient,private postService:PostsService) { }\n  onCreatePost(postData: Post) {\n    this.postService.createAndStorePost(postData.title,postData.content)\n    // console.log(postData);\n    // this.http.post<{name:string}>(\"https://ng-complete-guide-4db6b-default-rtdb.firebaseio.com/posts.json\", postData).subscribe(responseData => {\n    //   console.log(responseData);\n  \n\n    // })  \n    this.signupForm.reset();  \n\n  }\n  onFetchPosts() {\n    this.postService.fetchPosts();\n    this.postService.fetchPosts().subscribe(posts=>{\n      this.isFetching=false;\n      this.loadedPosts=posts;\n    },error=>{\n      this.error=error.message;\n      console.log(error)\n    });\n \n  }\n  onClearPosts(){\n    this.postService.deletePosts().subscribe(()=>{\n     this.loadedPosts=[]});\n   \n    \n  }\n  // private fetchPosts() {\n  //   this.isFetching=true;\n  //   //RESPONSE WILL return as a body\n  //   this.http.get<{[key:string]:Post}>(\"https://ng-complete-guide-4db6b-default-rtdb.firebaseio.com/posts.json\").pipe(map((responseData:{[key:string]:Post}) => {\n  //     const postsArray:Post[] = [];\n  //     for (const key in responseData) {\n  //       if (responseData.hasOwnProperty(key)) {\n  //         postsArray.push({...responseData[key], id: key });\n  //       }\n  //     }\n  //     return postsArray;\n\n  //   })).subscribe(posts => {\n  //     this.isFetching=false;\n  //     this.loadedPosts=posts;\n  //   })\n  // }\n  ngOnDestroy(){\n    this.errorSub.unsubscribe();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}